{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8eb5e249",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "from scipy.signal import argrelmax\n",
    "from PIL import Image\n",
    "from scipy.ndimage import gaussian_filter\n",
    "import matplotlib.pyplot as plt\n",
    "from skimage.transform import hough_line, hough_line_peaks, hough_circle, hough_circle_peaks\n",
    "from skimage.feature import canny\n",
    "from IPython.display import clear_output, display\n",
    "from scipy.optimize import linear_sum_assignment\n",
    "from skimage.measure import find_contours\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from skimage import filters, morphology\n",
    "from skimage.feature import canny\n",
    "from skimage.transform import hough_circle, hough_circle_peaks\n",
    "\n",
    "\n",
    "\n",
    "def find_lines(img, sigma=9.5, low=0.1, high=0.95):\n",
    "    edge = canny(img, sigma=sigma, low_threshold=low, high_threshold=high, use_quantiles=True)\n",
    "    angs = np.linspace(-np.pi/2, np.pi/2, 360, endpoint=False)\n",
    "    h, theta, dist = hough_line(edge, angs)\n",
    "    ph, pang, pdist = hough_line_peaks(h, theta, dist,\n",
    "                                     threshold=70, min_distance=20,\n",
    "                                     min_angle=80, num_peaks=4)\n",
    "    lines = []\n",
    "    xline = np.arange(edge.shape[1])\n",
    "    for ang, d0 in zip(pang, pdist):\n",
    "        x0, y0 = d0*np.cos(ang), d0*np.sin(ang)\n",
    "        m2 = -x0/y0 if y0 != 0 else 0\n",
    "        yline = m2 * (xline - x0) + y0\n",
    "        sel = (yline > 0) & (yline < img.shape[0])\n",
    "        lines.append((xline[sel], yline[sel]))\n",
    "    return ph, lines\n",
    "\n",
    "\n",
    "def find_circles(img, target_rad=86, view=5, sigma=4.5, low=0.1, high=0.95):\n",
    "    img_processed = filters.gaussian(img, sigma=0.5, preserve_range=True)\n",
    "    \n",
    "    edge = canny(img_processed, sigma=sigma, low_threshold=low, high_threshold=high, use_quantiles=True)\n",
    "    edge = morphology.binary_closing(edge, morphology.disk(3))\n",
    "    edge = morphology.binary_closing(edge, morphology.rectangle(1, 7))\n",
    "    edge = morphology.binary_closing(edge, morphology.rectangle(7, 1))\n",
    "\n",
    "    plt.figure(figsize=(12, 4))\n",
    "    plt.subplot(1, 3, 1)\n",
    "    plt.imshow(img, cmap='gray')\n",
    "    plt.title('Original Image')\n",
    "    plt.axis('off')\n",
    "    \n",
    "    plt.subplot(1, 3, 2)\n",
    "    plt.imshow(img_processed, cmap='gray')\n",
    "    plt.title('Preprocessed Image')\n",
    "    plt.axis('off')\n",
    "    \n",
    "    plt.subplot(1, 3, 3)\n",
    "    plt.imshow(edge, cmap='gray')\n",
    "    plt.title('Enhanced Canny Edges')\n",
    "    plt.axis('off')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "    rads = np.arange(target_rad-view, target_rad+view+1)\n",
    "    out = hough_circle(edge, rads)\n",
    "    accum, cx, cy, rad = hough_circle_peaks(out, rads,\n",
    "                                           min_xdistance=150,\n",
    "                                           min_ydistance=150,\n",
    "                                           num_peaks=4,\n",
    "                                           threshold=0.25)  # 0.35\n",
    "    return accum, cx, cy, rad\n",
    "\n",
    "\n",
    "# TODO: Very Rough Draft\n",
    "class WellTracker:\n",
    "    def __init__(self, max_missing=50, dist_threshold=100):\n",
    "        self.tracks = {}        # id -> {'pos':(x,y), 'missing':count}\n",
    "        self.max_missing = max_missing\n",
    "        self.dist_threshold = dist_threshold\n",
    "        self.next_id = 1\n",
    "\n",
    "    def update(self, detections):\n",
    "        n_det = len(detections)\n",
    "        if not self.tracks:\n",
    "            sorted_det = sorted(enumerate(detections), key=lambda x: x[1][0])\n",
    "            ids = []\n",
    "            for idx, (_, pos) in enumerate(sorted_det):\n",
    "                tid = self.next_id; self.next_id += 1\n",
    "                self.tracks[tid] = {'pos': pos, 'missing': 0}\n",
    "                ids.append((idx, tid))\n",
    "            ids_sorted = sorted(ids, key=lambda x: x[0])\n",
    "            return [tid for _, tid in ids_sorted]\n",
    "\n",
    "        track_ids = list(self.tracks.keys())\n",
    "        m = len(track_ids); n = n_det\n",
    "        cost = np.zeros((m, n))\n",
    "        for i, tid in enumerate(track_ids):\n",
    "            tx, ty = self.tracks[tid]['pos']\n",
    "            for j, (dx, dy) in enumerate(detections):\n",
    "                cost[i, j] = np.hypot(tx-dx, ty-dy)\n",
    "        row_idx, col_idx = linear_sum_assignment(cost)\n",
    "        assigned = [None]*n_det\n",
    "        used_tids = set()\n",
    "        for r, c in zip(row_idx, col_idx):\n",
    "            if cost[r, c] <= self.dist_threshold:\n",
    "                tid = track_ids[r]\n",
    "                assigned[c] = tid\n",
    "                self.tracks[tid]['pos'] = detections[c]\n",
    "                self.tracks[tid]['missing'] = 0\n",
    "                used_tids.add(tid)\n",
    "        for j in range(n_det):\n",
    "            if assigned[j] is None:\n",
    "                tid = self.next_id; self.next_id += 1\n",
    "                self.tracks[tid] = {'pos': detections[j], 'missing': 0}\n",
    "                assigned[j] = tid\n",
    "                used_tids.add(tid)\n",
    "        for tid in track_ids:\n",
    "            if tid not in used_tids:\n",
    "                self.tracks[tid]['missing'] += 1\n",
    "        for tid in list(self.tracks):\n",
    "            if self.tracks[tid]['missing'] > self.max_missing:\n",
    "                del self.tracks[tid]\n",
    "        return assigned\n",
    "\n",
    "\n",
    "def main():\n",
    "    tracker = WellTracker(max_missing=50, dist_threshold=100)\n",
    "    processed = 0\n",
    "    for i in range(5000):\n",
    "        clear_output(wait=True)\n",
    "        path = f\"/qfs/projects/bioprep/data/automation/grid_center_db.2/test{i}.npz\"\n",
    "        if not os.path.exists(path):\n",
    "            print(f\"Stopping: no file {path}\")\n",
    "            break\n",
    "        d = np.load(path)\n",
    "        phi = d['phi']\n",
    "        # filter phi in degrees\n",
    "        if phi < 90 or phi > 120:\n",
    "            continue\n",
    "        img = d['sample']\n",
    "        accum, cx, cy, rad = find_circles(img)\n",
    "        ph, lines = find_lines(img)\n",
    "        detections = list(zip(cx, cy))\n",
    "        ids = tracker.update(detections)\n",
    "        processed += 1\n",
    "        # visualization\n",
    "        plt.figure(figsize=(8,6))\n",
    "        plt.imshow(img, cmap='gray')\n",
    "        for (x,y,r,tid) in zip(cx, cy, rad, ids):\n",
    "            plt.gca().add_patch(plt.Circle((x,y), r, ec='tomato', fc='none', ls='--', alpha=0.8, lw=3))\n",
    "            plt.text(x, y, f\"{tid}\", color='yellow', fontsize=10, ha='center', va='center')\n",
    "        for xline, yline in lines:\n",
    "            plt.plot(xline, yline, 'r--', lw=1)\n",
    "        plt.title(f\"Frame {i}, φ={phi:.1f}°, proc={processed}\")\n",
    "        plt.axis('off')\n",
    "        plt.show()\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
